# -*- coding: utf-8 -*-
"""Quiz#2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hi0F8RqObfgHB3brkgXEkAbYl_BAxQPU
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

img = cv2.imread('shapes.png', 0) #Reading in Grey scale mode

type(img)

plt.imshow(img, cmap='gray')
plt.title('Original')
plt.xticks([])
plt.yticks([])
plt.show()

r,c = img.shape
T_img= np.zeros((r,c),np.uint8)

r,c = img.shape
# Selecting threshold value as the mean value of the original image.
thresh = img.mean()

#iterate loop until found the correct threshold value
while True:
    #   Getting a foreground image from the pixel values that are greater than threshold
    f_img = (img > thresh) * img
    
    #   Getting a background image from the pixel values that are less than or equal to threshold
    b_img = (img <= thresh) * img
    
    mean1 = f_img.mean()   #   Calculating mean of foreground image
    mean2 = b_img.mean()   #   Calculating mean of backeground image
    
    new_THRESH = (mean1 + mean2) / 2    #   calculating new threshold by averaging two means
    diff = new_THRESH - thresh          #   calculating difference of new and old threshold
    
    if diff > 1e-4:            #    Checking if the difference is greater than a small value then set new_threshold as the threshold and repeat the process
        thresh = new_THRESH
    else:                      #    else break the loop, the correct threshold has been found
        cv2.imwrite("foreground_img.jpg", f_img)
        cv2.imwrite("background_img.jpg", b_img)
        break

        
        
#  Truncate Thresholding
for i in range(r):
    for j in range(c):
        if(img[i,j] > thresh):
            T_img[i,j] = thresh
        else:
            T_img[i,j]=img[i,j]
            
cv2.imwrite("Truncate_Image.jpg", T_img)

TZ_img= np.zeros((r,c),np.uint8)
# Thresholding to Zero
for i in range(r):
    for j in range(c):
        if(img[i,j] <=thresh):
            TZ_img[i,j] = 0
        else:
            TZ_img[i,j]=img[i,j]    
        
            
cv2.imwrite("ThresholdingToZero_Image.jpg", TZ_img)

TIZ_img= np.zeros((r,c),np.uint8)
# Thresholding to Zero Inverted
for i in range(r):
    for j in range(c):
        if(img[i,j] >thresh):
            TIZ_img[i,j] = 0
        else:
            TIZ_img[i,j]=img[i,j]

        
            
cv2.imwrite("ThresholdingToZeroInvert_Image.jpg", TIZ_img)